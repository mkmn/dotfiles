[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
  "" Disable AutoComplPop.
  let g:acp_enableAtStartuo = 0
  "" Use neocomplete.
  let g:neocomplete#enable_at_startup = 1
  "" Use smartcase.
  let g:neocomplete#enable_smart_case = 1
  "" _(アンダースコア)区切りの補完を有効化
  let g:neocomplete#enable_underbar_completion = 1
  let g:neocomplete#enable_camel_case_completion = 1
  "" 補完を表示する最小文字数
  let g:neocomplete#auto_completion_start_length = 2
  "" preview window を閉じない
  let g:neocomplcache_enable_auto_close_preview = 0
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  let NERDTreeShowHidden = 1
  " Start NERDTree. If a file is specified, move the cursor to its window.
  autocmd StdinReadPre * let s:std_in=1
  autocmd VimEnter * NERDTree | if argc() > 0 || exists("s:std_in") | wincmd p | endif
  " Exit Vim if NERDTree is the only window left.
  autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() |
    \ quit | endif
  " If another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
  autocmd BufEnter * if bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
    \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif
'''

[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''
  let g:ale_fixers = {
  \   'ruby': ['rubocop'],
  \   'javascript': ['prettier'],
  \   'typescript': ['prettier']
  \}
  let g:ale_fix_on_save = 1
  let g:ale_lint_on_text_changed = 0
  let g:ale_open_list = 0
  let g:ale_keep_list_window_open = 1
  let g:ale_ruby_rubocop_auto_correct_all = 1
  let g:ale_ruby_rubocop_executable = 'bundle'

  nmap <F8> <Plug>(ale_fix)
'''

[[plugins]]
repo = 'slim-template/vim-slim'

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
merge = 0
hook_add = '''
  function! CheckBackSpace() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
  endfunction

  "autocomplete"
  inoremap <silent><expr> <C-j> coc#pum#visible() ? coc#pum#next(1) : "\<C-j>"
  inoremap <silent><expr> <C-k> coc#pum#visible() ? coc#pum#prev(1) : "\<C-k>"
  inoremap <silent><expr> <Enter> coc#pum#visible() ? coc#pum#confirm() : "\<Enter>"
  inoremap <silent><expr> <TAB>
	  \ coc#pum#visible() ? coc#pum#next(1):
	  \ CheckBackSpace() ? "\<Tab>" :
	  \ coc#refresh()
  inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
  inoremap <silent><expr> <c-space> coc#refresh()

  " Use Ctrl+Space to trigger completion
  inoremap <silent><expr> <c-space> coc#refresh()

  " Use `[c` and `]c` to navigate diagnostics
  nmap <silent> [c <Plug>(coc-diagnostic-prev)
  nmap <silent> ]c <Plug>(coc-diagnostic-next)

  " Remap keys for gotos
  nmap <silent> <space><space> :<C-u>CocList<cr>
  nmap <silent> <space>h :<C-u>call CocAction('doHover')<cr>
  nmap <silent> df <Plug>(coc-definition)
  nmap <silent> dr <Plug>(coc-references)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
'''

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup = 1
  let g:indent_guides_exclude_filetypes = ['help', 'nerdtree']
'''
